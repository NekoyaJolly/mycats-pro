{
  "name": "cat-management-workspace",
  "version": "1.0.0",
  "description": "Cat Management System - Development Scripts",
  "scripts": {
    "dev": "docker compose up --build -d",
    "dev:native": "run-p backend:dev frontend:dev",
    "start": "npm run dev",
    "stop": "docker compose down",
    "restart": "docker compose restart",
    "logs": "docker compose logs -f",
    "status": "docker compose ps",
    "clean": "docker compose down -v --rmi all",
    "clean:system": "docker system prune -f",
    "clean:all": "run-s clean clean:system",
    "backend:logs": "docker compose logs backend -f",
    "backend:restart": "docker compose restart backend",
    "backend:shell": "docker compose exec backend sh",
    "backend:dev": "cd backend && npm run start:dev",
    "backend:install": "cd backend && npm install",
    "db:logs": "docker compose logs postgres -f",
    "db:shell": "docker compose exec postgres psql -U catuser -d catmanagement",
    "db:migrate": "cd backend && npm run prisma:migrate",
    "db:generate": "cd backend && npm run prisma:generate",
    "db:seed": "cd backend && npm run seed",
    "db:studio": "cd backend && npm run prisma:studio",
    "services:start": "run-p services:postgres services:redis",
    "services:postgres": "sudo service postgresql start",
    "services:redis": "sudo service redis-server start",
    "services:stop": "run-p services:postgres:stop services:redis:stop",
    "services:postgres:stop": "sudo service postgresql stop",
    "services:redis:stop": "sudo service redis-server stop",
    "services:status": "run-p services:postgres:status services:redis:status",
    "services:postgres:status": "sudo service postgresql status",
    "services:redis:status": "sudo service redis-server status",
    "test:health": "curl -s http://localhost:3001/health | jq .",
    "test:api": "curl -s http://localhost:3001/api/cats | jq .",
    "production": "docker compose -f docker-compose.production.yml up --build -d",
    "production:stop": "docker compose -f docker-compose.production.yml down",
    "frontend:install": "cd cat-ui-test && npm install",
    "frontend:dev": "cd cat-ui-test && npm run dev",
    "frontend:build": "cd cat-ui-test && npm run build",
    "frontend:start": "cd cat-ui-test && npm run start",
    "help": "echo \"Available commands: dev, dev:native, start, stop, restart, logs, status, clean, backend:*, db:*, services:*, test:*, production*, frontend:*\""
  },
  "dependencies": {
    "@nestjs/common": "^11.1.5",
    "@nestjs/config": "^4.0.2",
    "@prisma/client": "^6.13.0",
    "prisma": "^6.13.0"
  },
  "devDependencies": {
    "@types/node": "^24.1.0",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "concurrently": "^8.2.0",
    "npm-run-all": "^4.1.5"
  },
  "keywords": [
    "docker",
    "cat-management",
    "development"
  ],
  "private": true
}
