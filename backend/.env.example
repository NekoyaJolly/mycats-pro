###############################################
# mycats Backend .env.example
# Copy -> .env して必要に応じて値を更新
# 本番用は別途インフラ側で安全に管理
###############################################

# 基本サーバ設定
NODE_ENV=development
PORT=3004
LOG_LEVEL=debug

# Database (ローカル: scripts/local-postgres.sh が作成する設定に合わせる)
DATABASE_URL=postgresql://mycats:mycats@localhost:55432/mycats_development?schema=public

# CORS 許可オリジン(複数はカンマ区切り運用想定)
CORS_ORIGIN=http://localhost:3000

# 認証 / JWT
# アクセストークン (短寿命)
JWT_SECRET=changeme-local-jwt-secret
JWT_EXPIRES_IN=15m
# リフレッシュトークン (長寿命) ※必ずアクセストークンと異なる強度の秘密鍵
JWT_REFRESH_SECRET=changeme-local-refresh-secret
JWT_REFRESH_EXPIRES_IN=7d
PASSWORD_MIN_LENGTH=8

# 管理者 初期/更新 用 (seed / create-or-update-admin.ts で使用)
ADMIN_EMAIL=admin@example.com
ADMIN_PASSWORD=Passw0rd!
# 強制パスワード再ハッシュ (1=既存adminのpasswordをENV値で上書き) デフォルト0
ADMIN_FORCE_UPDATE=0

# (開発専用) 認証バイパスフラグ: 1=全リクエストをダミーユーザーで通過 / 本番=必ず0
# (DEPRECATED) 一時的な開発用バイパス。撤去計画: docs/auth-disabled-deprecation.md 参照
AUTH_DISABLED=0

# Argon2 tuning (未指定ならコード側デフォルト)
ARGON2_MEMORY_COST=65536
ARGON2_TIME_COST=3
ARGON2_PARALLELISM=4
ARGON2_HASH_LENGTH=64
ARGON2_SALT_LENGTH=32

# レート制限(必要になったら有効化)
THROTTLE_TTL=60000
THROTTLE_LIMIT=100

# 健康チェック設定
HEALTH_CHECK_DATABASE=true
HEALTH_CHECK_MEMORY_THRESHOLD=0.9

# Prisma Client エンジン (library|binary) - デフォルト利用ならコメント可
PRISMA_CLIENT_ENGINE_TYPE=library

# 旧設定/非推奨 (完全移行済みのため削除候補)
# (参考として残存していた BCRYPT_ROUNDS / SESSION_SECRET は上位env例から整理済み)

# メモ:
# - JWT_REFRESH_SECRET は JWT_SECRET と必ず別文字列
# - 期限形式: 15m / 7d / 1h など (nest-jwt sign の expiresIn 指定)
# - 本番では refresh cookie に Secure / SameSite=Lax 以上を推奨