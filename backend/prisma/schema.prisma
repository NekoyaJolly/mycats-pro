generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                  String           @id @default(uuid())
  clerkId             String           @unique
  email               String           @unique
  firstName           String?
  lastName            String?
  role                UserRole         @default(USER)
  isActive            Boolean          @default(true)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  passwordHash        String?
  failedLoginAttempts Int              @default(0)
  lockedUntil         DateTime?
  lastLoginAt         DateTime?
  breedingRecords     BreedingRecord[]
  careRecords         CareRecord[]
  cats                Cat[]
  loginAttempts       LoginAttempt[]
  schedules           Schedule[]

  @@map("users")
}

model LoginAttempt {
  id        String   @id @default(uuid())
  userId    String?
  email     String
  ipAddress String?
  userAgent String?
  success   Boolean
  reason    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_attempts")
}

model Breed {
  id          String     @id @default(uuid())
  code        Int        @unique
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cats        Cat[]
  pedigrees   Pedigree[]

  @@map("breeds")
}

model CoatColor {
  id          String     @id @default(uuid())
  code        Int        @unique
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cats        Cat[]
  pedigrees   Pedigree[]

  @@map("coat_colors")
}

model Cat {
  id                    String           @id @default(uuid())
  registrationId        String           @unique
  name                  String
  breedId               String?
  colorId               String?
  legacyBreed           String?
  legacyColor           String?
  pattern               String?
  gender                Gender
  birthDate             DateTime
  weight                Float?
  microchipId           String?          @unique
  isActive              Boolean          @default(true)
  notes                 String?
  imageUrl              String?
  fatherId              String?
  motherId              String?
  ownerId               String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  femaleBreedingRecords BreedingRecord[] @relation("FemaleBreeding")
  maleBreedingRecords   BreedingRecord[] @relation("MaleBreeding")
  careRecords           CareRecord[]
  tags                  CatTag[]
  breed                 Breed?           @relation(fields: [breedId], references: [id])
  color                 CoatColor?       @relation(fields: [colorId], references: [id])
  father                Cat?             @relation("CatFather", fields: [fatherId], references: [id])
  fatherOf              Cat[]            @relation("CatFather")
  mother                Cat?             @relation("CatMother", fields: [motherId], references: [id])
  motherOf              Cat[]            @relation("CatMother")
  owner                 User             @relation(fields: [ownerId], references: [id])
  pedigrees             Pedigree[]
  schedules             Schedule[]

  @@map("cats")
}

model BreedingRecord {
  id              String         @id @default(uuid())
  maleId          String
  femaleId        String
  breedingDate    DateTime
  expectedDueDate DateTime?
  actualDueDate   DateTime?
  numberOfKittens Int?
  notes           String?
  status          BreedingStatus @default(PLANNED)
  recordedBy      String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  female          Cat            @relation("FemaleBreeding", fields: [femaleId], references: [id])
  male            Cat            @relation("MaleBreeding", fields: [maleId], references: [id])
  recorder        User           @relation(fields: [recordedBy], references: [id])

  @@map("breeding_records")
}

model CareRecord {
  id           String    @id @default(uuid())
  catId        String
  careType     CareType
  description  String
  careDate     DateTime
  nextDueDate  DateTime?
  cost         Float?
  veterinarian String?
  notes        String?
  recordedBy   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  cat          Cat       @relation(fields: [catId], references: [id])
  recorder     User      @relation(fields: [recordedBy], references: [id])

  @@map("care_records")
}

model Schedule {
  id           String         @id @default(uuid())
  title        String
  description  String?
  scheduleDate DateTime
  scheduleType ScheduleType
  status       ScheduleStatus @default(PENDING)
  priority     Priority       @default(MEDIUM)
  catId        String?
  assignedTo   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  assignee     User           @relation(fields: [assignedTo], references: [id])
  cat          Cat?           @relation(fields: [catId], references: [id])

  @@map("schedules")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  color       String   @default("#3B82F6")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cats        CatTag[]

  @@map("tags")
}

model Pedigree {
  id                    String     @id @default(uuid())
  pedigreeId            String     @unique
  catId                 String?
  title                 String?
  catteryName           String?
  catName               String
  breedId               String?
  breedCode             Int?
  gender                Int?
  eyeColor              String?
  colorId               String?
  coatColorCode         Int?
  birthDate             DateTime?
  registrationDate      DateTime?
  breederName           String?
  ownerName             String?
  brotherCount          Int?
  sisterCount           Int?
  notes                 String?
  notes2                String?
  otherNo               String?
  championFlag          String?
  oldCode               String?
  fatherPedigreeId      String?
  motherPedigreeId      String?
  paternalGrandfatherId String?
  paternalGrandmotherId String?
  maternalGrandfatherId String?
  maternalGrandmotherId String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  catName2              String?
  pedigreeIssueDate     DateTime?
  breed                 Breed?     @relation(fields: [breedId], references: [id])
  cat                   Cat?       @relation(fields: [catId], references: [id])
  color                 CoatColor? @relation(fields: [colorId], references: [id])
  fatherPedigree        Pedigree?  @relation("PedigreeFather", fields: [fatherPedigreeId], references: [id])
  fatherOf              Pedigree[] @relation("PedigreeFather")
  maternalGrandfather   Pedigree?  @relation("MatGrandfather", fields: [maternalGrandfatherId], references: [id])
  maternalGrandfatherOf Pedigree[] @relation("MatGrandfather")
  maternalGrandmother   Pedigree?  @relation("MatGrandmother", fields: [maternalGrandmotherId], references: [id])
  maternalGrandmotherOf Pedigree[] @relation("MatGrandmother")
  motherPedigree        Pedigree?  @relation("PedigreeMother", fields: [motherPedigreeId], references: [id])
  motherOf              Pedigree[] @relation("PedigreeMother")
  paternalGrandfather   Pedigree?  @relation("PatGrandfather", fields: [paternalGrandfatherId], references: [id])
  paternalGrandfatherOf Pedigree[] @relation("PatGrandfather")
  paternalGrandmother   Pedigree?  @relation("PatGrandmother", fields: [paternalGrandmotherId], references: [id])
  paternalGrandmotherOf Pedigree[] @relation("PatGrandmother")

  @@map("pedigrees")
}

model CatTag {
  catId     String
  tagId     String
  createdAt DateTime @default(now())
  cat       Cat      @relation(fields: [catId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([catId, tagId])
  @@map("cat_tags")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum BreedingStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CareType {
  VACCINATION
  HEALTH_CHECK
  GROOMING
  DENTAL_CARE
  MEDICATION
  SURGERY
  OTHER
}

enum ScheduleType {
  BREEDING
  CARE
  APPOINTMENT
  REMINDER
  MAINTENANCE
}

enum ScheduleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
