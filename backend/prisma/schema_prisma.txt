// Prisma Schema - Last Updated: 2025-10-04T19:45:13.641Z
// Auto-generated from schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 自動同期テスト - 2025年8月9日

generator client {
  provider   = "prisma-client-js"
  engineType = "library"    // ← Node-API を明示
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkId     String   @unique @map("clerk_id")
  email       String   @unique
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  role        UserRole @default(USER)
  isActive    Boolean  @default(true) @map("is_active")
  passwordHash String? @map("password_hash")
  refreshToken String?  @map("refresh_token") // JWT refresh token storage
  failedLoginAttempts Int @default(0) @map("failed_login_attempts")
  lockedUntil DateTime? @map("locked_until")
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  breedingRecords BreedingRecord[]
  careRecords     CareRecord[]
  schedules       Schedule[]
  loginAttempts   LoginAttempt[]

  @@map("users")
}

model LoginAttempt {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  email     String
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  success   Boolean
  reason    String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_attempts")
}

model Breed {
  id          String   @id @default(uuid())
  code        Int      @unique // キー from CSV
  name        String   @unique // 種類名称 from CSV
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  cats        Cat[]

  @@map("breeds")
}

model CoatColor {
  id          String   @id @default(uuid())
  code        Int      @unique // キー from CSV
  name        String   @unique // 毛色名称 from CSV
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  cats        Cat[]

  @@map("coat_colors")
}

model Cat {
  id              String    @id @default(uuid())
  registrationId  String    @unique @map("registration_id")
  name            String
  
  // Updated breed and color relations
  breedId         String?   @map("breed_id")
  breed           Breed?    @relation(fields: [breedId], references: [id])
  colorId         String?   @map("color_id")
  color           CoatColor? @relation(fields: [colorId], references: [id])
  
  // Legacy fields for backward compatibility
  legacyBreed     String?   @map("legacy_breed") // Old breed field
  legacyColor     String?   @map("legacy_color") // Old color field
  
  pattern         String?
  gender          Gender
  birthDate       DateTime  @map("birth_date")
  weight          Float?
  microchipId     String?   @unique @map("microchip_id")
  isActive        Boolean   @default(true) @map("is_active")
  notes           String?
  imageUrl        String?   @map("image_url")
  
  // Parent information
  fatherId        String?   @map("father_id")
  motherId        String?   @map("mother_id")
  father          Cat?      @relation("CatFather", fields: [fatherId], references: [id])
  mother          Cat?      @relation("CatMother", fields: [motherId], references: [id])
  
  // Children relations
  fatherOf        Cat[]     @relation("CatFather")
  motherOf        Cat[]     @relation("CatMother")
  
  // Owner
  // ...ownerId, ownerフィールド削除
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  maleBreedingRecords   BreedingRecord[] @relation("MaleBreeding")
  femaleBreedingRecords BreedingRecord[] @relation("FemaleBreeding")
  careRecords     CareRecord[]
  schedules       Schedule[]
  tags            CatTag[]
  pedigreeId      String?   @map("pedigree_id") // PedigreeIDで紐付け（全頭ではない）

  @@map("cats")
}

model BreedingRecord {
  id          String   @id @default(uuid())
  maleId      String   @map("male_id")
  femaleId    String   @map("female_id")
  breedingDate DateTime @map("breeding_date")
  expectedDueDate DateTime? @map("expected_due_date")
  actualDueDate   DateTime? @map("actual_due_date")
  numberOfKittens Int? @map("number_of_kittens")
  notes       String?
  status      BreedingStatus @default(PLANNED)
  
  male        Cat      @relation("MaleBreeding", fields: [maleId], references: [id])
  female      Cat      @relation("FemaleBreeding", fields: [femaleId], references: [id])
  
  recordedBy  String  @map("recorded_by")
  recorder    User     @relation(fields: [recordedBy], references: [id])
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("breeding_records")
}

model CareRecord {
  id          String   @id @default(uuid())
  catId       String   @map("cat_id")
  careType    CareType @map("care_type")
  description String
  careDate    DateTime @map("care_date")
  nextDueDate DateTime? @map("next_due_date")
  cost        Float?
  veterinarian String?
  notes       String?
  
  cat         Cat      @relation(fields: [catId], references: [id])
  
  recordedBy  String  @map("recorded_by")
  recorder    User     @relation(fields: [recordedBy], references: [id])
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("care_records")
}

model Schedule {
  id          String        @id @default(uuid())
  title       String
  description String?
  scheduleDate DateTime @map("schedule_date")
  scheduleType ScheduleType @map("schedule_type")
  status      ScheduleStatus @default(PENDING)
  priority    Priority      @default(MEDIUM)
  
  // Optional cat relation
  catId       String?  @map("cat_id")
  cat         Cat?          @relation(fields: [catId], references: [id])
  
  assignedTo  String  @map("assigned_to")
  assignee    User          @relation(fields: [assignedTo], references: [id])
  
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("schedules")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  color       String   @default("#3B82F6")
  description String?
  
  cats        CatTag[]
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

model Pedigree {
  id                String   @id @default(uuid())
  pedigreeId        String   @unique @map("pedigree_id")
  title             String?  @map("title")
  catName           String?  @map("cat_name")
  catName2          String?  @map("cat_name2")
  breedCode         Int?     @map("breed_code")
  genderCode        Int?     @map("gender_code")
  eyeColor          String?  @map("eye_color")
  coatColorCode     Int?     @map("coat_color_code")
  birthDate         String?  @map("birth_date")
  breederName       String?  @map("breeder_name")
  ownerName         String?  @map("owner_name")
  registrationDate  String?  @map("registration_date")
  brotherCount      Int?     @map("brother_count")
  sisterCount       Int?     @map("sister_count")
  notes             String?  @map("notes")
  notes2            String?  @map("notes2")
  otherNo           String?  @map("other_no")
  fatherTitle       String?  @map("father_title")
  fatherCatName     String?  @map("father_cat_name")
  fatherCatName2    String?  @map("father_cat_name2")
  fatherCoatColor   String?  @map("father_coat_color")
  fatherEyeColor    String?  @map("father_eye_color")
  fatherJCU         String?  @map("father_jcu")
  fatherOtherCode   String?  @map("father_other_code")
  motherTitle       String?  @map("mother_title")
  motherCatName     String?  @map("mother_cat_name")
  motherCatName2    String?  @map("mother_cat_name2")
  motherCoatColor   String?  @map("mother_coat_color")
  motherEyeColor    String?  @map("mother_eye_color")
  motherJCU         String?  @map("mother_jcu")
  motherOtherCode   String?  @map("mother_other_code")
  FFTitle           String?  @map("ff_title")
  FFCatName         String?  @map("ff_cat_name")
  FFCatColor        String?  @map("ff_cat_color")
  FFJCU             String?  @map("ff_jcu")
  FMTitle           String?  @map("fm_title")
  FMCatName         String?  @map("fm_cat_name")
  FMCatColor        String?  @map("fm_cat_color")
  FMJCU             String?  @map("fm_jcu")
  MFTitle           String?  @map("mf_title")
  MFCatName         String?  @map("mf_cat_name")
  MFCatColor        String?  @map("mf_cat_color")
  MFJCU             String?  @map("mf_jcu")
  MMTitle           String?  @map("mm_title")
  MMCatName         String?  @map("mm_cat_name")
  MMCatColor        String?  @map("mm_cat_color")
  MMJCU             String?  @map("mm_jcu")
  FFFTitle          String?  @map("fff_title")
  FFFCatName        String?  @map("fff_cat_name")
  FFFCatColor       String?  @map("fff_cat_color")
  FFFJCU            String?  @map("fff_jcu")
  FFMTitle          String?  @map("ffm_title")
  FFMCatName        String?  @map("ffm_cat_name")
  FFMCatColor       String?  @map("ffm_cat_color")
  FFMJCU            String?  @map("ffm_jcu")
  FMFTitle          String?  @map("fmf_title")
  FMFCatName        String?  @map("fmf_cat_name")
  FMFCatColor       String?  @map("fmf_cat_color")
  FMFJCU            String?  @map("fmf_jcu")
  FMMTitle          String?  @map("fmm_title")
  FMMCatName        String?  @map("fmm_cat_name")
  FMMCatColor       String?  @map("fmm_cat_color")
  FMMJCU            String?  @map("fmm_jcu")
  MFFTitle          String?  @map("mff_title")
  MFFCatName        String?  @map("mff_cat_name")
  MFFCatColor       String?  @map("mff_cat_color")
  MFFJCU            String?  @map("mff_jcu")
  MFMTitle          String?  @map("mfm_title")
  MFMCatName        String?  @map("mfm_cat_name")
  MFMCatColor       String?  @map("mfm_cat_color")
  MFMJCU            String?  @map("mfm_jcu")
  MMFTitle          String?  @map("mmf_title")
  MMFCatName        String?  @map("mmf_cat_name")
  MMFCatColor       String?  @map("mmf_cat_color")
  MMFJCU            String?  @map("mmf_jcu")
  MMMTitle          String?  @map("mmm_title")
  MMMCatName        String?  @map("mmm_cat_name")
  MMMCatColor       String?  @map("mmm_cat_color")
  MMMJCU            String?  @map("mmm_jcu")
  oldCode           String?  @map("old_code")
  // ...既存のリレーションは必要に応じて追加...
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  @@map("pedigrees")
}

model CatTag {
  catId       String   @map("cat_id")
  tagId       String   @map("tag_id")
  
  cat         Cat      @relation(fields: [catId], references: [id], onDelete: Cascade)
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now()) @map("created_at")

  @@id([catId, tagId])
  @@map("cat_tags")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum BreedingStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CareType {
  VACCINATION
  HEALTH_CHECK
  GROOMING
  DENTAL_CARE
  MEDICATION
  SURGERY
  OTHER
}

enum ScheduleType {
  BREEDING
  CARE
  APPOINTMENT
  REMINDER
  MAINTENANCE
}

enum ScheduleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
