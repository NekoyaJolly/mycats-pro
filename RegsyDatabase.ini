Option Compare Database
Option Explicit

'--- ▼▼▼ 共通関数・サブルーチン ▼▼▼ ---

'■ LookupValue: DLookupをラップし、Nullを空文字に変換する
Private Function LookupValue(fieldName As String, tableName As String, criteria As String) As Variant
    LookupValue = Nz(DLookup(fieldName, tableName, criteria), "")
End Function

'■ ValidateID: テキストボックスの値が数値かつ >0 かどうかチェック
Private Function ValidateID(ctrl As Control, ByRef numericID As Long) As Boolean
    ValidateID = False
    If Not IsNull(ctrl.Value) And IsNumeric(ctrl.Value) Then
        numericID = CLng(ctrl.Value)
        ValidateID = (numericID > 0)
    End If
    If Not ValidateID Then
        MsgBox "有効なキーを入力してください。", vbExclamation
    End If
End Function

'■ GenerateCompositeID: 猫種コード、色柄コード、性別コード、連番を組み合わせる
Private Sub GenerateCompositeID(uniqueID As Long)
    Dim formattedCat As String, formattedColor As String, formattedGender As String
   
    formattedCat = Format(Nz(Me.txt猫種コード.Value, 0), "00")
    formattedColor = Format(Nz(Me.txt色柄コード.Value, 0), "000")
    formattedGender = CStr(Nz(Me.txt性別コード.Value, "0"))
   
End Sub
'■ ClearFormFields: フォームの入力内容を一括クリア（本猫＋14グループ）
Private Sub ClearFormFields()

    '―――◆ 本猫基本情報 ◆――――――――――――――――――――――――
    Me.txt本猫ID = Null
    Me.txt本猫名前 = ""
    Me.txt目色 = ""
    Me.txt猫種コード = ""
    Me.txt猫種名称 = ""
    Me.txt色柄コード = ""
    Me.txt色柄名称 = ""
    Me.txt性別コード = ""
    Me.txt性別名称 = ""
    Me.txt誕生日 = Null
    Me.txt登録日 = Null
    Me.txt繁殖者 = ""
    Me.txt所有者 = ""
    Me.txt兄妹M = ""
    Me.txt兄妹F = ""
    Me.txt摘要1 = ""
    Me.txt摘要2 = ""
    Me.txt他団体No = ""
   
    '―――◆ 親猫キー ◆――――――――――――――――――――――――――――
    Me.txt両親ID = Null
    Me.txt父猫ID = Null
    Me.txt母猫ID = Null

    '―――◆ Generation 1 : 直接の親（2グループ）――――――――――
    ' 父
    Me.txtFCH登録 = ""
    Me.txtF名前 = ""
    Me.txtF色柄 = ""
    Me.txtF目色 = ""
    Me.txtFナンバー = ""
    ' 母
    Me.txtMCH登録 = ""
    Me.txtM名前 = ""
    Me.txtM色柄 = ""
    Me.txtM目色 = ""
    Me.txtMナンバー = ""
   
    '―――◆ Generation 2 : 祖父母（4グループ）――――――――――――――
    Dim gen2 As Variant
    gen2 = Array( _
        "FF", "FM", "MF", "MM")
       
    Dim suf As Variant: suf = Array("CH登録", "名前", "色柄", "ナンバー")
   
    Dim g As Variant, s As Variant
    For Each g In gen2
        For Each s In suf
            Me.Controls("txt" & g & "-" & s).Value = ""
        Next s
    Next g
   
    '―――◆ Generation 3 : 曾祖父母（8グループ）――――――――――――
    Dim gen3 As Variant
    gen3 = Array( _
        "MFF", "MFM", "MMF", "MMM", _
        "FFF", "FFM", "FMF", "FMM")
       
    Dim suf3 As Variant
    suf3 = Array("CH登録", "名前", "ナンバー")   ' 世代3は色柄なし（設計に合わせて調整）
   
    For Each g In gen3
        For Each s In suf3
            Me.Controls("txt" & g & "-" & s).Value = ""
        Next s
    Next g
   
    '―――◆ 仕上げ：重複色リセット（青→黒）――――――――――――――
    Call CheckDuplicateCatNumbers          ' 全フィールドが空になるので ForeColor も初期化
End Sub


'■ CheckDuplicateCatNumbers: 親・祖先ナンバーの重複チェック → 重複箇所を文字色変更
Public Sub CheckDuplicateCatNumbers()
    Dim CatNumbers As Variant
    CatNumbers = Array( _
        "txtFナンバー", "txtFF-ナンバー", "txtFM-ナンバー", _
        "txtFFF-ナンバー", "txtFFM-ナンバー", "txtFMF-ナンバー", "txtFMM-ナンバー", _
        "txtMナンバー", "txtMF-ナンバー", "txtMM-ナンバー", _
        "txtMFF-ナンバー", "txtMFM-ナンバー", "txtMMF-ナンバー", "txtMMM-ナンバー")

    Dim dict As Object, coll As Collection
    Set dict = CreateObject("Scripting.Dictionary")

    Dim i As Integer
    Dim ctrl As Control
    Dim numValue As String

    '★ いったん全てForeColorをデフォルトに戻す
    For i = LBound(CatNumbers) To UBound(CatNumbers)
        Me.Controls(CatNumbers(i)).ForeColor = vbWindowText
    Next i

    '★ Dictionaryにナンバーを入れて重複を探す
    For i = LBound(CatNumbers) To UBound(CatNumbers)
        Set ctrl = Me.Controls(CatNumbers(i))
        numValue = Trim(Nz(ctrl.Value, ""))
        If numValue <> "" Then
            If dict.exists(numValue) Then
                dict(numValue).Add ctrl
            Else
                Set coll = New Collection
                coll.Add ctrl
                dict.Add numValue, coll
            End If
        End If
    Next i

    '★ 重複がある場合、ForeColorを青に
    Dim idx As Variant
    For Each idx In dict.Keys
        Set coll = dict(idx)
        If coll.Count > 1 Then
            Dim c As Variant
            For Each c In coll
                c.ForeColor = vbBlue
            Next c
        End If
    Next idx
End Sub

'--- ▼▼▼ テキストボックス・コンボボックスのイベント ▼▼▼ ---

'■ txt色柄コード_AfterUpdate
Private Sub txt色柄コード_AfterUpdate()
    Dim code As String
    code = Trim(Me.txt色柄コード)
    If code = "" Or Not IsNumeric(code) Then Exit Sub

    Dim vColorName As Variant
    vColorName = LookupValue("[色柄名称]", "色柄データUTF8Ver", "[色柄コード]=" & CLng(code))
    If vColorName = "" Then
        MsgBox "入力された色柄コード '" & code & "' はマスタに存在しません。", vbExclamation
        Me.txt色柄名称 = ""
    Else
        Me.txt色柄名称 = vColorName
    End If
End Sub

'■ txt性別コード_AfterUpdate
Private Sub txt性別コード_AfterUpdate()
    Dim code As String
    code = Trim(Me.txt性別コード)
    If code = "" Or Not IsNumeric(code) Then Exit Sub

    Dim vGenderName As Variant
    vGenderName = LookupValue("[性別名称]", "性別データUTF8Ver", "[性別コード]=" & CLng(code))
    If vGenderName = "" Then
        MsgBox "入力された性別コード '" & code & "' はマスタに存在しません。", vbExclamation
        Me.txt性別名称 = ""
    Else
        Me.txt性別名称 = vGenderName
    End If
End Sub

'■ txt猫種コード_AfterUpdate
Private Sub txt猫種コード_AfterUpdate()
    Dim code As String
    code = Trim(Me.txt猫種コード)
    If code = "" Or Not IsNumeric(code) Then Exit Sub

    Dim vBreedName As Variant
    vBreedName = LookupValue("[猫種名称]", "猫種データUTF8Ver", "[猫種コード]=" & CLng(code))
    If vBreedName = "" Then
        MsgBox "入力された猫種コード '" & code & "' はマスタに存在しません。", vbExclamation
        Me.txt猫種名称 = ""
    Else
        Me.txt猫種名称 = vBreedName
    End If
End Sub

'■ txt本猫ID_Click / AfterUpdate: 入力された本猫IDに対応するデータを血統書データから取得
Private Sub txt本猫ID_Click()
    Dim uniqueID As Long
    If Not ValidateID(Me.txt本猫ID, uniqueID) Then Exit Sub

    Dim criteria As String
    criteria = "[キー]=" & uniqueID

    ' ①本猫情報
    Me.txt本猫名前 = LookupValue("[本猫名前]", "血統書データUTFVer", criteria)
    Me.txt目色 = LookupValue("[目色]", "血統書データUTFVer", criteria)
    Me.txt誕生日 = LookupValue("[生年月日]", "血統書データUTFVer", criteria)
    Me.txt登録日 = LookupValue("[登録年月日]", "血統書データUTFVer", criteria)
    Me.txt繁殖者 = LookupValue("[繁殖者名]", "血統書データUTFVer", criteria)
    Me.txt所有者 = LookupValue("[所有者名]", "血統書データUTFVer", criteria)
    Me.txt兄妹M = LookupValue("[兄弟の人数]", "血統書データUTFVer", criteria)
    Me.txt兄妹F = LookupValue("[姉妹の人数]", "血統書データUTFVer", criteria)
    Me.txt摘要1 = LookupValue("[摘要1]", "血統書データUTFVer", criteria)
    Me.txt摘要2 = LookupValue("[摘要2]", "血統書データUTFVer", criteria)
    Me.txt他団体No = LookupValue("[他団体No]", "血統書データUTFVer", criteria)

    ' ②コード情報
    Me.txt猫種コード = LookupValue("[猫種コード]", "血統書データUTFVer", criteria)
    Me.txt色柄コード = LookupValue("[色柄コード]", "血統書データUTFVer", criteria)
    Me.txt性別コード = LookupValue("[性別コード]", "血統書データUTFVer", criteria)

' ③名称情報（マスタから）
    Me.txt猫種名称 = LookupValue("[猫種名称]", "猫種データUTF8Ver", "[猫種コード]=" & Me.txt猫種コード)
    Me.txt色柄名称 = LookupValue("[色柄名称]", "色柄データUTF8Ver", "[色柄コード]=" & Me.txt色柄コード)
    Me.txt性別名称 = LookupValue("[性別名称]", "性別データUTF8Ver", "[性別コード]=" & Me.txt性別コード)




    ' ④世代情報 (配列で一括取得例)
    Dim fields As Variant
    fields = Array( _
        "FCH登録", "F名前", "F色柄", "F目色", "Fナンバー", _
        "MCH登録", "M名前", "M色柄", "M目色", "Mナンバー", _
        "FF-CH登録", "FF-名前", "FF-色柄", "FF-ナンバー", _
        "FM-CH登録", "FM-名前", "FM-色柄", "FM-ナンバー", _
        "MF-CH登録", "MF-名前", "MF-色柄", "MF-ナンバー", _
        "MM-CH登録", "MM-名前", "MM-色柄", "MM-ナンバー", _
        "FFF-CH登録", "FFF-名前", "FFF-ナンバー", _
        "FFM-CH登録", "FFM-名前", "FFM-ナンバー", _
        "FMF-CH登録", "FMF-名前", "FMF-ナンバー", _
        "FMM-CH登録", "FMM-名前", "FMM-ナンバー", _
        "MFF-CH登録", "MFF-名前", "MFF-ナンバー", _
        "MFM-CH登録", "MFM-名前", "MFM-ナンバー", _
        "MMF-CH登録", "MMF-名前", "MMF-ナンバー", _
        "MMM-CH登録", "MMM-名前", "MMM-ナンバー" _
    )

    Dim i As Integer, ctrlName As String
    For i = LBound(fields) To UBound(fields)
        ctrlName = "txt" & fields(i)
        Me.Controls(ctrlName).Value = LookupValue("[" & fields(i) & "]", "血統書データUTFVer", criteria)
    Next

    ' ⑤複合IDの自動生成
    Call GenerateCompositeID(uniqueID)
End Sub

Private Sub txt本猫ID_AfterUpdate()
    Call txt本猫ID_Click
End Sub

'■ txt父猫ID_AfterUpdate （父猫データを取得し、世代情報にも反映）
Private Sub txt父猫ID_AfterUpdate()
    Dim fatherKey As Long
    If Not ValidateID(Me.txt父猫ID, fatherKey) Then Exit Sub

    Dim db As DAO.Database
    Dim rs As DAO.Recordset

    Set db = CurrentDb
    Set rs = db.OpenRecordset("SELECT * FROM 血統書データUTFVer WHERE [キー]=" & fatherKey, dbOpenSnapshot)
    If rs.EOF Then
        MsgBox "該当する父猫データがありません。", vbExclamation
        rs.Close
        Exit Sub
    End If

    ' 父猫情報
    Me.txtFCH登録 = Nz(rs!CH登録, "")
    Me.txtF名前 = Nz(rs!本猫名前, "")
    Me.txtF目色 = Nz(rs!目色, "")
    Dim f色柄コード As Long: f色柄コード = Nz(rs!色柄コード, 0)
    Dim f猫種コード As Long: f猫種コード = Nz(rs!猫種コード, 0)
    Dim f性別コード As Long: f性別コード = Nz(rs!性別コード, 0)

    Me.txtF色柄 = Nz(DLookup("色柄名称", "色柄データUTF8Ver", "[色柄コード]=" & f色柄コード), "")
    Me.txtFナンバー = f猫種コード & f色柄コード & f性別コード & "-" & fatherKey

    ' 2世代・3世代情報をフォームに反映
' Generation 2 情報セット
    Me.Controls("txtFF-CH登録") = Nz(rs!FCH登録, "")
    Me.Controls("txtFF-名前") = Nz(rs!F名前, "")
    Me.Controls("txtFF-色柄") = Nz(rs!F色柄, "")
    Me.Controls("txtFF-ナンバー") = Nz(rs!Fナンバー, "")

    Me.Controls("txtFM-CH登録") = Nz(rs!MCH登録, "")
    Me.Controls("txtFM-名前") = Nz(rs!M名前, "")
    Me.Controls("txtFM-色柄") = Nz(rs!M色柄, "")
    Me.Controls("txtFM-ナンバー") = Nz(rs!Mナンバー, "")

    ' Generation 3 情報セット
    Me.Controls("txtFFF-CH登録") = Nz(rs![FF-CH登録], "")
    Me.Controls("txtFFF-名前") = Nz(rs![FF-名前], "")
    Me.Controls("txtFFF-ナンバー") = Nz(rs![FF-ナンバー], "")

    Me.Controls("txtFFM-CH登録") = Nz(rs![FM-CH登録], "")
    Me.Controls("txtFFM-名前") = Nz(rs![FM-名前], "")
    Me.Controls("txtFFM-ナンバー") = Nz(rs![FM-ナンバー], "")

    Me.Controls("txtFMF-CH登録") = Nz(rs![MF-CH登録], "")
    Me.Controls("txtFMF-名前") = Nz(rs![MF-名前], "")
    Me.Controls("txtFMF-ナンバー") = Nz(rs![MF-ナンバー], "")

    Me.Controls("txtFMM-CH登録") = Nz(rs![MM-CH登録], "")
    Me.Controls("txtFMM-名前") = Nz(rs![MM-名前], "")
    Me.Controls("txtFMM-ナンバー") = Nz(rs![MM-ナンバー], "")
    rs.Close

    ' 重複チェック
    Call CheckDuplicateCatNumbers
End Sub

'■ txt母猫ID_AfterUpdate
Private Sub txt母猫ID_AfterUpdate()
    Dim motherKey As Long
    If Not ValidateID(Me.txt母猫ID, motherKey) Then Exit Sub

    Dim db As DAO.Database
    Dim rs As DAO.Recordset

    Set db = CurrentDb
    Set rs = db.OpenRecordset("SELECT * FROM 血統書データUTFVer WHERE [キー]=" & motherKey, dbOpenSnapshot)
    If rs.EOF Then
        MsgBox "該当する母猫データがありません。", vbExclamation
        rs.Close
        Exit Sub
    End If

    Me.txtMCH登録 = Nz(rs!CH登録, "")
    Me.txtM名前 = Nz(rs!本猫名前, "")
    Me.txtM目色 = Nz(rs!目色, "")
    Dim m色柄コード As Long: m色柄コード = Nz(rs!色柄コード, 0)
    Dim m猫種コード As Long: m猫種コード = Nz(rs!猫種コード, 0)
    Dim m性別コード As Long: m性別コード = Nz(rs!性別コード, 0)

    Me.txtM色柄 = Nz(DLookup("色柄名称", "色柄データUTF8Ver", "[色柄コード]=" & m色柄コード), "")
    Me.txtMナンバー = m猫種コード & m色柄コード & m性別コード & "-" & motherKey
 ' Generation 2情報セット
    Me.Controls("txtMF-CH登録") = Nz(rs!FCH登録, "")
    Me.Controls("txtMF-名前") = Nz(rs!F名前, "")
    Me.Controls("txtMF-色柄") = Nz(rs!F色柄, "")
    Me.Controls("txtMF-ナンバー") = Nz(rs!Fナンバー, "")

    Me.Controls("txtMM-CH登録") = Nz(rs!MCH登録, "")
    Me.Controls("txtMM-名前") = Nz(rs!M名前, "")
    Me.Controls("txtMM-色柄") = Nz(rs!M色柄, "")
    Me.Controls("txtMM-ナンバー") = Nz(rs!Mナンバー, "")

    ' Generation 3情報セット
    Me.Controls("txtMFF-CH登録") = Nz(rs![FF-CH登録], "")
    Me.Controls("txtMFF-名前") = Nz(rs![FF-名前], "")
    Me.Controls("txtMFF-色柄") = Nz(rs![FF-色柄], "")
    Me.Controls("txtMFF-ナンバー") = Nz(rs![FF-ナンバー], "")

    Me.Controls("txtMFM-CH登録") = Nz(rs![FM-CH登録], "")
    Me.Controls("txtMFM-名前") = Nz(rs![FM-名前], "")
    Me.Controls("txtMFM-色柄") = Nz(rs![FM-色柄], "")
    Me.Controls("txtMFM-ナンバー") = Nz(rs![FM-ナンバー], "")

    Me.Controls("txtMMF-CH登録") = Nz(rs![MF-CH登録], "")
    Me.Controls("txtMMF-名前") = Nz(rs![MF-名前], "")
    Me.Controls("txtMMF-色柄") = Nz(rs![MF-色柄], "")
    Me.Controls("txtMMF-ナンバー") = Nz(rs![MF-ナンバー], "")

    Me.Controls("txtMMM-CH登録") = Nz(rs![MM-CH登録], "")
    Me.Controls("txtMMM-名前") = Nz(rs![MM-名前], "")
    Me.Controls("txtMMM-色柄") = Nz(rs![MM-色柄], "")
    Me.Controls("txtMMM-ナンバー") = Nz(rs![MM-ナンバー], "")
    rs.Close
    Call CheckDuplicateCatNumbers
End Sub
'==============================================================
'  ? ClearGenerationControls : 世代14グループだけを一括クリア
'==============================================================
Public Sub ClearGenerationControls()
    Dim ctlList As Variant
    ctlList = Array( _
        "txtFCH登録", "txtF名前", "txtF色柄", "txtFナンバー", _
        "txtMCH登録", "txtM名前", "txtM色柄", "txtMナンバー", _
        "txtFF-CH登録", "txtFF-名前", "txtFF-色柄", "txtFF-ナンバー", _
        "txtFM-CH登録", "txtFM-名前", "txtFM-色柄", "txtFM-ナンバー", _
        "txtMF-CH登録", "txtMF-名前", "txtMF-色柄", "txtMF-ナンバー", _
        "txtMM-CH登録", "txtMM-名前", "txtMM-色柄", "txtMM-ナンバー", _
        "txtMFF-CH登録", "txtMFF-名前", "txtMFF-ナンバー", _
        "txtMFM-CH登録", "txtMFM-名前", "txtMFM-ナンバー", _
        "txtMMF-CH登録", "txtMMF-名前", "txtMMF-ナンバー", _
        "txtMMM-CH登録", "txtMMM-名前", "txtMMM-ナンバー", _
        "txtFFF-CH登録", "txtFFF-名前", "txtFFF-ナンバー", _
        "txtFFM-CH登録", "txtFFM-名前", "txtFFM-ナンバー", _
        "txtFMF-CH登録", "txtFMF-名前", "txtFMF-ナンバー", _
        "txtFMM-CH登録", "txtFMM-名前", "txtFMM-ナンバー" _
    )
   
    Dim i As Long
    For i = LBound(ctlList) To UBound(ctlList)
        Me.Controls(ctlList(i)).Value = ""
    Next i
End Sub

'==============================================================
'  ? txt両親ID_AfterUpdate : 両親世代(14グループ)を呼び出す
'==============================================================
Private Sub txt両親ID_AfterUpdate()

    On Error GoTo Err_Handler
   
    '――― 入力チェック ―――――――――――――――――――――――
    If IsNull(Me.txt両親ID) Or Trim(Me.txt両親ID & "") = "" Then Exit Sub
    If Not IsNumeric(Me.txt両親ID) Then
        MsgBox "両親ID には数値のキーを入力してください。", vbExclamation
        Exit Sub
    End If
   
    Dim parentID As Long: parentID = CLng(Me.txt両親ID)
    Dim criteria As String: criteria = "[キー]=" & parentID
   
    If DCount("*", "血統書データUTFVer", criteria) = 0 Then
        MsgBox "キー " & parentID & " に該当する猫は見つかりません。", vbExclamation
        Exit Sub
    End If
   
    '――― 世代欄を一旦クリア ―――――――――――――――――――
    Call ClearGenerationControls
   
    '――― Generation-1 (父・母) ―――――――――――――――――
    Me.txtFCH登録 = Nz(DLookup("[FCH登録]", "血統書データUTFVer", criteria), "")
    Me.txtF名前 = Nz(DLookup("[F名前]", "血統書データUTFVer", criteria), "")
    Me.txtF色柄 = Nz(DLookup("[F色柄]", "血統書データUTFVer", criteria), "")
    Me.txtFナンバー = Nz(DLookup("[Fナンバー]", "血統書データUTFVer", criteria), "")
   
    Me.txtMCH登録 = Nz(DLookup("[MCH登録]", "血統書データUTFVer", criteria), "")
    Me.txtM名前 = Nz(DLookup("[M名前]", "血統書データUTFVer", criteria), "")
    Me.txtM色柄 = Nz(DLookup("[M色柄]", "血統書データUTFVer", criteria), "")
    Me.txtMナンバー = Nz(DLookup("[Mナンバー]", "血統書データUTFVer", criteria), "")
   
    '――― Generation-2 (FF,FM,MF,MM) ――――――――――――――――
    Dim g2 As Variant: g2 = Array("FF", "FM", "MF", "MM")
    Dim p As Variant
    For Each p In g2
        Me.Controls("txt" & p & "-CH登録") = Nz(DLookup("[" & p & "-CH登録]", "血統書データUTFVer", criteria), "")
        Me.Controls("txt" & p & "-名前") = Nz(DLookup("[" & p & "-名前]", "血統書データUTFVer", criteria), "")
        Me.Controls("txt" & p & "-色柄") = Nz(DLookup("[" & p & "-色柄]", "血統書データUTFVer", criteria), "")
        Me.Controls("txt" & p & "-ナンバー") = Nz(DLookup("[" & p & "-ナンバー]", "血統書データUTFVer", criteria), "")
    Next p
   
    '――― Generation-3 (MFF,MFM,MMF,MMM,FFF,FFM,FMF,FMM) ―――
    Dim g3 As Variant
    g3 = Array("MFF", "MFM", "MMF", "MMM", "FFF", "FFM", "FMF", "FMM")
    For Each p In g3
        Me.Controls("txt" & p & "-CH登録") = Nz(DLookup("[" & p & "-CH登録]", "血統書データUTFVer", criteria), "")
        Me.Controls("txt" & p & "-名前") = Nz(DLookup("[" & p & "-名前]", "血統書データUTFVer", criteria), "")
        Me.Controls("txt" & p & "-ナンバー") = Nz(DLookup("[" & p & "-ナンバー]", "血統書データUTFVer", criteria), "")
    Next p
   
    '――― 文字色重複チェック ――――――――――――――――――――
    Call CheckDuplicateCatNumbers
   
Exit_Handler:
    Exit Sub
   
Err_Handler:
    MsgBox "txt両親ID_AfterUpdate でエラーが発生しました :" & vbCrLf & _
           Err.Number & " - " & Err.Description, vbExclamation
    Resume Exit_Handler
End Sub

'==============================================================
'  ? （任意）Enterキーで確定させたい場合
'==============================================================
Private Sub txt両親ID_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        Call txt両親ID_AfterUpdate
        KeyCode = 0
    End If
End Sub

'--- ▼▼▼ ボタン（新規登録 / 仮登録） ▼▼▼ ---

'■ cmd新規猫登録_Click: 新しいキー(DMax+1)を割り当ててフォーム項目クリア
Private Sub cmd新規猫登録_Click()
    Dim newKey As Long
    newKey = Nz(DMax("[キー]", "血統書データUTFVer"), 0) + 1
    Me.txt本猫ID.Value = newKey
    Call ClearFormFields
    ' txt本猫ID だけは新しい値を保持、他はクリア
    Me.txt本猫ID.Value = newKey
End Sub

'■ cmd仮登録_Click: フォームの値を血統書データUTFVerに追加登録 → 登録後の処理分岐
Private Sub cmd仮登録_Click()
    On Error GoTo ErrorHandler

    Dim db As DAO.Database
    Dim ws As DAO.Workspace
    Dim rs As DAO.Recordset
    Dim newKey As Long
    Dim compositeID As String
    Dim tempStr As String
    Dim exists As Variant

    ' フォームの未保存変更を確定
    If Me.Dirty Then Me.Dirty = False

    Set ws = DBEngine.Workspaces(0)
    Set db = CurrentDb()
    ws.BeginTrans

    ' 1) 本猫IDのチェック
    tempStr = Replace(Replace(Trim(Me.txt本猫ID.Value), "　", ""), " ", "")
    If Not IsNumeric(tempStr) Then
        MsgBox "本猫IDが数値ではありません。", vbCritical
        ws.Rollback
        GoTo ExitHandler
    End If
    newKey = CLng(tempStr)
    If newKey <= 0 Then
        MsgBox "本猫IDは正の整数を指定してください。", vbCritical
        ws.Rollback
        GoTo ExitHandler
    End If

    ' 2) 主キー重複チェック
    exists = DLookup("[キー]", "血統書データUTFVer", "[キー]=" & newKey)
    If Not IsNull(exists) Then
        MsgBox "このキー（" & newKey & "）は既に存在します。", vbCritical
        ws.Rollback
        GoTo ExitHandler
    End If

    ' 3) 複合ID生成用
    compositeID = Format(Nz(Me.txt猫種コード, 0), "00") & _
                  Format(Nz(Me.txt色柄コード, 0), "000") & _
                  Format(Nz(Me.txt性別コード, 0), "0") & "-" & newKey

    '=== 4) テーブル追加処理 ================================
Set rs = db.OpenRecordset("血統書データUTFVer", dbOpenDynaset, dbFailOnError)
rs.AddNew
        rs!キー = newKey
        rs!本猫名前 = Nz(Me.txt本猫名前, "")
        rs!目色 = Nz(Me.txt目色, "")
   
        '■■ 数値フィールドは Val + Nz( ,0) で「必ず数値」を渡す
        rs!色柄コード = Nz(Val(Me.txt色柄コード), 0)
        rs!猫種コード = Nz(Val(Me.txt猫種コード), 0)
        rs!性別コード = Nz(Val(Me.txt性別コード), 0)
        '■■ 日付フィールドは IsDate で判定
       ' 生年月日 (Short Text, yyyy.mm.dd)
        rs!生年月日 = Nz(Me.txt誕生日, "")
        rs!登録年月日 = Nz(Me.txt登録日, "")
        rs!繁殖者名 = Nz(Me.txt繁殖者, "")
        rs!所有者名 = Nz(Me.txt所有者, "")
        rs!兄弟の人数 = Nz(Val(Me.txt兄妹M), 0)
        rs!姉妹の人数 = Nz(Val(Me.txt兄妹F), 0)
        rs!摘要1 = Nz(Me.txt摘要1, "")
        rs!摘要2 = Nz(Me.txt摘要2, "")
        rs!他団体No = Nz(Me.txt他団体No, "")

        ' --- Generation 1（父母）
        rs.fields("[FCH登録]") = Nz(Me.txtFCH登録, "")
        rs.fields("[F名前]") = Nz(Me.txtF名前, "")
        rs.fields("[F色柄]") = Nz(Me.txtF色柄, "")
        rs.fields("[F目色]") = Nz(Me.txtF目色, "")
        rs.fields("[Fナンバー]") = Nz(Me.txtFナンバー, "")

        rs.fields("[MCH登録]") = Nz(Me.txtMCH登録, "")
        rs.fields("[M名前]") = Nz(Me.txtM名前, "")
        rs.fields("[M色柄]") = Nz(Me.txtM色柄, "")
        rs.fields("[M目色]") = Nz(Me.txtM目色, "")
        rs.fields("[Mナンバー]") = Nz(Me.txtMナンバー, "")

        ' --- Generation 2
        Dim gen2 As Variant
        gen2 = Array("FF", "FM", "MF", "MM")
        Dim i As Integer
        For i = 0 To UBound(gen2)
            rs.fields("[" & gen2(i) & "-CH登録]") = Nz(Me("txt" & gen2(i) & "-CH登録"), "")
            rs.fields("[" & gen2(i) & "-名前]") = Nz(Me("txt" & gen2(i) & "-名前"), "")
            rs.fields("[" & gen2(i) & "-色柄]") = Nz(Me("txt" & gen2(i) & "-色柄"), "")
            rs.fields("[" & gen2(i) & "-ナンバー]") = Nz(Me("txt" & gen2(i) & "-ナンバー"), "")
        Next i

        ' --- Generation 3
        Dim gen3 As Variant
        gen3 = Array("MFF", "MFM", "MMF", "MMM", "FFF", "FFM", "FMF", "FMM")
        For i = 0 To UBound(gen3)
            rs.fields("[" & gen3(i) & "-CH登録]") = Nz(Me("txt" & gen3(i) & "-CH登録"), "")
            rs.fields("[" & gen3(i) & "-名前]") = Nz(Me("txt" & gen3(i) & "-名前"), "")
            rs.fields("[" & gen3(i) & "-ナンバー]") = Nz(Me("txt" & gen3(i) & "-ナンバー"), "")
        Next i
    rs.Update

    ws.CommitTrans
    rs.Close

    MsgBox "新規猫（ID: " & compositeID & "）が正常に登録されました。", vbInformation

    ' 5) 登録後の処理選択へ
    Call PostRegistrationProcess(newKey)

ExitHandler:
    On Error Resume Next
    If Not rs Is Nothing Then rs.Close
    Set rs = Nothing
    Set db = Nothing
    Set ws = Nothing
    Exit Sub

ErrorHandler:
    ws.Rollback
    MsgBox "エラー：" & Err.Description, vbCritical
    Resume ExitHandler
End Sub

'■ PostRegistrationProcess: 登録後の処理を分岐
Private Sub PostRegistrationProcess(newKey As Long)
    Dim userChoice As String
    userChoice = InputBox( _
        "処理を選択してください（番号入力）：" & vbCrLf & _
        "1: レポートを表示→印刷（単独）" & vbCrLf & _
        "2: データベース登録のみ" & vbCrLf & _
        "3: レポートを表示→印刷（複数頭）", _
        "登録後の処理選択")

    Select Case userChoice
        Case "1"
            ' 単独印刷
            DoCmd.OpenReport "血統書レポート", acViewPreview, , "[キー]=" & newKey
            DoCmd.PrintOut acPrintAll
            DoCmd.Close acReport, "血統書レポート", acSaveNo
            Call ClearFormFields
            ' 次のID候補を表示（自動連番）
            Me.txt本猫ID.Value = newKey + 1

        Case "2"
            ' DB登録のみ
            MsgBox "データベースへの登録が完了しました。", vbInformation
            Call ClearFormFields
            Me.txt本猫ID.Value = newKey + 1

        Case "3"
            ' 複数頭印刷（フォーム内容は保持）
            DoCmd.OpenReport "血統書レポート", acViewPreview, , "[キー]=" & newKey
            DoCmd.PrintOut acPrintAll
            DoCmd.Close acReport, "血統書レポート", acSaveNo
            Me.txt本猫ID.Value = newKey + 1

        Case Else
            MsgBox "無効な選択です。", vbExclamation
    End Select
End Sub

' 子猫レコード登録直後に最新出産日を母猫レコードへ反映
Private Sub Form_AfterInsert()
    Dim mID As Long
    ' txt母猫ID は、子猫レコード上の母猫ID テキストボックス名に合わせてください
    mID = Nz(Me.txtMナンバー, 0)
    If mID > 0 Then
        Call UpdateMotherLastBirth(mID)
    End If
End Sub

' 指定した母猫ID の最新出産日を [適用2] フィールドにセット
Public Sub UpdateMotherLastBirth(ByVal motherID As Long)
    Dim lastBirth As Variant
    ' DMax で最新の生年月日（出産日）を取得
    lastBirth = DMax( _
        "[生年月日]", _
        "血統書データUTFVer", _
        "[Mナンバー]=" & motherID _
    )
    ' 値が取れたら、母猫レコードを更新
    If Not IsNull(lastBirth) Then
        Dim sql As String
        sql = "UPDATE 血統書データUTFVer " & _
              "SET [適用2]=#" & Format(lastBirth, "yyyy\/mm\/dd") & "# " & _
              "WHERE [キー]=" & motherID & ";"
        CurrentDb.Execute sql, dbFailOnError
    End If
End Sub
