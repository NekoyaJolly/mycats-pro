name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deploy_to_production:
        description: "Deploy to production"
        required: false
        default: false
        type: boolean

# Security: Minimal permissions for enhanced security
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "9"

jobs:
  # ジョブ1: セキュリティスキャン
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-fs-scan"
          wait-for-processing: false

      - name: Check for critical vulnerabilities
        run: |
          # Security: Check for critical vulnerabilities and fail fast
          echo "🔍 Scanning for critical and high severity vulnerabilities..."
          if trivy fs --severity CRITICAL,HIGH --quiet --exit-code 1 .; then
            echo "✅ No critical or high severity vulnerabilities found"
          else
            echo "❌ Critical or high severity vulnerabilities detected!"
            echo "📊 Full vulnerability report:"
            trivy fs --severity CRITICAL,HIGH .
            echo "🚫 Build failed due to security vulnerabilities"
            exit 1
          fi

      - name: Security audit for dependencies
        run: |
          # Security: Additional dependency security audit
          echo "🔒 Running dependency security audit..."
          # Install security audit tools if available
          if command -v npm &> /dev/null; then
            echo "📦 Running npm audit..."
            npm audit --audit-level high || echo "⚠️ npm audit found issues"
          fi
          echo "✅ Dependency security audit completed"

  # ジョブ2: 型チェック・Lint
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-dir.outputs.STORE_PATH }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        working-directory: backend
        run: npx prisma generate

      - name: TypeScript type check - Backend
        working-directory: backend
        run: npx tsc --noEmit

      - name: TypeScript type check - Frontend
        run: pnpm --filter frontend run type-check

      - name: Lint - Backend
        working-directory: backend
        run: npm run lint -- --max-warnings=300
        continue-on-error: false

      - name: Lint - Frontend
        run: pnpm --filter frontend run lint
        continue-on-error: false

  # ジョブ3: ユニットテスト
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [security-scan]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
      JWT_SECRET: test-jwt-secret-key-for-ci
      ARGON2_MEMORY_COST: 65536
      ARGON2_TIME_COST: 3
      ARGON2_PARALLELISM: 4
      MAX_LOGIN_ATTEMPTS: 5
      LOGIN_LOCKOUT_DURATION_MINUTES: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-dir.outputs.STORE_PATH }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        working-directory: backend
        run: npx prisma generate

      - name: Run database migrations
        working-directory: backend
        run: npx prisma migrate deploy

      - name: Run backend unit tests
        working-directory: backend
        run: npm run test

      - name: Run frontend unit tests
        run: pnpm --filter frontend run test

  # ジョブ4: E2Eテスト
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [security-scan]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2edb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/e2edb
      JWT_SECRET: test-jwt-secret-key-for-e2e
      ARGON2_MEMORY_COST: 65536
      ARGON2_TIME_COST: 3
      ARGON2_PARALLELISM: 4
      MAX_LOGIN_ATTEMPTS: 5
      LOGIN_LOCKOUT_DURATION_MINUTES: 15
      PRISMA_CLIENT_ENGINE_TYPE: library
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-dir.outputs.STORE_PATH }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean Prisma engines
        run: |
          rm -rf node_modules/.prisma || true
          rm -rf backend/node_modules/.prisma || true

      - name: Generate Prisma Client (Node-API)
        working-directory: backend
        env:
          PRISMA_CLIENT_ENGINE_TYPE: library
        run: pnpm exec prisma generate

      - name: Run database migrations
        working-directory: backend
        run: npx prisma migrate deploy

      - name: Debug Prisma client
        run: |
          node -e "console.log('openssl:', process.versions.openssl)"
          echo '--- backend/.prisma ---'
          ls -la backend/node_modules/.prisma || true
          echo '--- root/.prisma ---'
          ls -la node_modules/.prisma || true
          echo '--- schema check ---'
          grep -n 'binaryTargets' backend/prisma/schema.prisma || true

      - name: Run E2E tests
        working-directory: backend
        run: npm run test:e2e

  # ジョブ5: ビルド確認
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-dir.outputs.STORE_PATH }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        working-directory: backend
        run: npx prisma generate

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Build frontend
        run: pnpm --filter frontend run build

      - name: Verify build outputs
        run: |
          echo "🔍 Verifying build outputs..."
          echo "Backend build files:"
          ls -la backend/dist/ || (echo "❌ Backend build failed - no dist/ directory" && exit 1)
          echo "Frontend build files:"
          ls -la frontend/.next/ || (echo "❌ Frontend build failed - no .next/ directory" && exit 1)
          echo "✅ Build outputs verified"

      - name: Upload build artifacts - Backend
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: backend-build
          path: backend/dist/
          retention-days: 7
          if-no-files-found: error

      - name: Upload build artifacts - Frontend
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7
          if-no-files-found: error

  # ジョブ6: 本番環境デプロイ (mainブランチのみ)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, e2e-test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      deployments: write
      actions: read

    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache-dir
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-dir.outputs.STORE_PATH }}
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-pnpm-${{ env.PNPM_VERSION }}-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts - Backend
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/dist/

      - name: Download build artifacts - Frontend
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/

      - name: Verify artifacts
        run: |
          echo "🔍 Verifying downloaded artifacts..."
          echo "Backend artifacts:"
          ls -la backend/dist/ || echo "❌ Backend dist/ not found"
          echo "Frontend artifacts:"
          ls -la frontend/.next/ || echo "❌ Frontend .next/ not found"
          
          if [ ! -d "backend/dist" ] || [ ! -d "frontend/.next" ]; then
            echo "❌ Required build artifacts are missing"
            exit 1
          fi
          echo "✅ All artifacts verified"

      - name: Validate production environment
        run: |
          # Security: Validate production environment variables without exposing them
          node -e "
          const { validateProductionEnvironment } = require('./backend/dist/common/environment.validation.js');
          try {
            validateProductionEnvironment();
            console.log('✅ Production environment validation passed');
          } catch (error) {
            console.error('❌ Production environment validation failed:', error.message);
            process.exit(1);
          }
          "
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          NODE_ENV: production
          PORT: ${{ vars.PRODUCTION_PORT || '3004' }}
          CORS_ORIGIN: ${{ vars.PRODUCTION_CORS_ORIGIN }}

      - name: Run database migrations
        working-directory: backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Production health check
        run: |
          # Security: Wait for application startup with timeout
          echo "⏳ Waiting for application startup..."
          sleep 30

          # Security: Health check with proper error handling
          echo "🏥 Performing health check..."
          if curl -f -s --max-time 30 "${{ vars.PRODUCTION_URL }}/health"; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

          # Security: API availability check with authentication if needed
          echo "🔌 Checking API availability..."
          if curl -f -s --max-time 30 "${{ vars.PRODUCTION_URL }}/api/v1/breeds"; then
            echo "✅ API availability check passed"
          else
            echo "❌ API availability check failed"
            exit 1
          fi
        timeout-minutes: 5

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi
